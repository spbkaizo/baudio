
attiny1614_volume_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000030b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00803800  00803800  0000030a  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000030b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000380  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002203  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c8c  00000000  00000000  00002603  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005b1  00000000  00000000  0000428f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00004840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ecb  00000000  00000000  00004900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000021d  00000000  00000000  000057cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  000059e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_3>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 08 01 	call	0x210	; 0x210 <main>
  9c:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <spi_init>:

volatile uint8_t volume; // Mid-volume, marked volatile as it's accessed in ISR and main loop
uint8_t EEMEM storedVolume = 127; // EEPROM variable to store volume level

void spi_init() {
	PORTA.DIRSET = SCK_PIN_bm | SI_PIN_bm | LPOT_CS_bm | RPOT_CS_bm | LED_PIN_bm; // Set as output
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f4 e0       	ldi	r31, 0x04	; 4
  a8:	8e e9       	ldi	r24, 0x9E	; 158
  aa:	81 83       	std	Z+1, r24	; 0x01
	// Configure interrupt for volume buttons
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc; // Enable pull-up, interrupt on falling edge for VOL_UP
  ac:	8b e0       	ldi	r24, 0x0B	; 11
  ae:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc; // Enable pull-up, interrupt on falling edge for VOL_DOWN
  b0:	86 8b       	std	Z+22, r24	; 0x16
	sei(); // Enable global interrupts
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <spi_send_byte>:
}

void spi_send_byte(uint8_t byte) {
	for (int i = 7; i >= 0; i--) {
  b6:	27 e0       	ldi	r18, 0x07	; 7
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	23 c0       	rjmp	.+70     	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
		if (byte & (1 << i)) {
  bc:	48 2f       	mov	r20, r24
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <spi_send_byte+0x12>
  c4:	55 95       	asr	r21
  c6:	47 95       	ror	r20
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <spi_send_byte+0xe>
  cc:	40 ff       	sbrs	r20, 0
  ce:	06 c0       	rjmp	.+12     	; 0xdc <spi_send_byte+0x26>
			PORTA.OUT |= SI_PIN_bm;
  d0:	e0 e0       	ldi	r30, 0x00	; 0
  d2:	f4 e0       	ldi	r31, 0x04	; 4
  d4:	94 81       	ldd	r25, Z+4	; 0x04
  d6:	94 60       	ori	r25, 0x04	; 4
  d8:	94 83       	std	Z+4, r25	; 0x04
  da:	05 c0       	rjmp	.+10     	; 0xe6 <spi_send_byte+0x30>
			} else {
			PORTA.OUT &= ~SI_PIN_bm;
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f4 e0       	ldi	r31, 0x04	; 4
  e0:	94 81       	ldd	r25, Z+4	; 0x04
  e2:	9b 7f       	andi	r25, 0xFB	; 251
  e4:	94 83       	std	Z+4, r25	; 0x04
		}
		PORTA.OUT |= SCK_PIN_bm;
  e6:	e0 e0       	ldi	r30, 0x00	; 0
  e8:	f4 e0       	ldi	r31, 0x04	; 4
  ea:	94 81       	ldd	r25, Z+4	; 0x04
  ec:	92 60       	ori	r25, 0x02	; 2
  ee:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	9a e1       	ldi	r25, 0x1A	; 26
  f2:	9a 95       	dec	r25
  f4:	f1 f7       	brne	.-4      	; 0xf2 <spi_send_byte+0x3c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <spi_send_byte+0x42>
		_delay_us(10); // Adjust based on SPI requirements
		PORTA.OUT &= ~SCK_PIN_bm;
  f8:	94 81       	ldd	r25, Z+4	; 0x04
  fa:	9d 7f       	andi	r25, 0xFD	; 253
  fc:	94 83       	std	Z+4, r25	; 0x04
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc; // Enable pull-up, interrupt on falling edge for VOL_DOWN
	sei(); // Enable global interrupts
}

void spi_send_byte(uint8_t byte) {
	for (int i = 7; i >= 0; i--) {
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	31 09       	sbc	r19, r1
 102:	33 23       	and	r19, r19
 104:	dc f6       	brge	.-74     	; 0xbc <spi_send_byte+0x6>
		}
		PORTA.OUT |= SCK_PIN_bm;
		_delay_us(10); // Adjust based on SPI requirements
		PORTA.OUT &= ~SCK_PIN_bm;
	}
}
 106:	08 95       	ret

00000108 <pot_write>:

void pot_write(uint8_t cs_bm, uint8_t value) {
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	18 2f       	mov	r17, r24
 112:	06 2f       	mov	r16, r22
	PORTA.OUT &= ~cs_bm; // Select potentiometer
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d4 e0       	ldi	r29, 0x04	; 4
 118:	8c 81       	ldd	r24, Y+4	; 0x04
 11a:	91 2f       	mov	r25, r17
 11c:	90 95       	com	r25
 11e:	89 23       	and	r24, r25
 120:	8c 83       	std	Y+4, r24	; 0x04
	spi_send_byte(0x11); // Command to write
 122:	81 e1       	ldi	r24, 0x11	; 17
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_send_byte>
	spi_send_byte(value); // Value
 128:	80 2f       	mov	r24, r16
 12a:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_send_byte>
	PORTA.OUT |= cs_bm; // Deselect potentiometer
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	81 2b       	or	r24, r17
 132:	8c 83       	std	Y+4, r24	; 0x04
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <__vector_3>:

ISR(PORTA_PORT_vect) {
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	// Immediate volume adjustment
	if (!(PORTA.IN & VOL_UP_bm) && volume < 255) {
 160:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 164:	85 fd       	sbrc	r24, 5
 166:	1a c0       	rjmp	.+52     	; 0x19c <__vector_3+0x5e>
 168:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 16c:	8f 3f       	cpi	r24, 0xFF	; 255
 16e:	b1 f0       	breq	.+44     	; 0x19c <__vector_3+0x5e>
		volume++;
 170:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
		pot_write(LPOT_CS_bm, volume);
 17a:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	0e 94 84 00 	call	0x108	; 0x108 <pot_write>
		pot_write(RPOT_CS_bm, volume);
 184:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	0e 94 84 00 	call	0x108	; 0x108 <pot_write>
		eeprom_write_byte(&storedVolume, volume); // Update EEPROM
 18e:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 25 01 	call	0x24a	; 0x24a <eeprom_write_byte>
 19a:	1d c0       	rjmp	.+58     	; 0x1d6 <__vector_3+0x98>
		} else if (!(PORTA.IN & VOL_DOWN_bm) && volume > 0) {
 19c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 1a0:	86 fd       	sbrc	r24, 6
 1a2:	19 c0       	rjmp	.+50     	; 0x1d6 <__vector_3+0x98>
 1a4:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1a8:	88 23       	and	r24, r24
 1aa:	a9 f0       	breq	.+42     	; 0x1d6 <__vector_3+0x98>
		volume--;
 1ac:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1b0:	81 50       	subi	r24, 0x01	; 1
 1b2:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
		pot_write(LPOT_CS_bm, volume);
 1b6:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	0e 94 84 00 	call	0x108	; 0x108 <pot_write>
		pot_write(RPOT_CS_bm, volume);
 1c0:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1c4:	88 e0       	ldi	r24, 0x08	; 8
 1c6:	0e 94 84 00 	call	0x108	; 0x108 <pot_write>
		eeprom_write_byte(&storedVolume, volume); // Update EEPROM
 1ca:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 25 01 	call	0x24a	; 0x24a <eeprom_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	2f e7       	ldi	r18, 0x7F	; 127
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <__vector_3+0x9e>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <__vector_3+0xa8>
 1e6:	00 00       	nop
	}
	// Debounce (simple method)
	_delay_ms(50);
	// Clear interrupt flags for PORTA to prevent repeated triggers
	PORTA.INTFLAGS = VOL_UP_bm | VOL_DOWN_bm;
 1e8:	80 e6       	ldi	r24, 0x60	; 96
 1ea:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <main>:

int main(void) {
	spi_init();
 210:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_init>

	// Load the volume level from EEPROM at startup
	volume = eeprom_read_byte(&storedVolume);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 1d 01 	call	0x23a	; 0x23a <eeprom_read_byte>
 21c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>

	while (1) {
		// Toggle LED state
		PORTA.OUTTGL = LED_PIN_bm;
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__RODATA_PM_OFFSET__+0x7f8407>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	84 e3       	ldi	r24, 0x34	; 52
 22a:	9c e0       	ldi	r25, 0x0C	; 12
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x1c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x26>
 236:	00 00       	nop
 238:	f3 cf       	rjmp	.-26     	; 0x220 <main+0x10>

0000023a <eeprom_read_byte>:
 23a:	03 d0       	rcall	.+6      	; 0x242 <eeprom_mapen>
 23c:	80 81       	ld	r24, Z
 23e:	99 27       	eor	r25, r25
 240:	08 95       	ret

00000242 <eeprom_mapen>:
 242:	fc 01       	movw	r30, r24
 244:	e0 50       	subi	r30, 0x00	; 0
 246:	fc 4e       	sbci	r31, 0xEC	; 236
 248:	08 95       	ret

0000024a <eeprom_write_byte>:
 24a:	26 2f       	mov	r18, r22

0000024c <eeprom_write_r18>:
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	e0 e0       	ldi	r30, 0x00	; 0
 252:	f0 e1       	ldi	r31, 0x10	; 16
 254:	32 81       	ldd	r19, Z+2	; 0x02
 256:	31 fd       	sbrc	r19, 1
 258:	fd cf       	rjmp	.-6      	; 0x254 <eeprom_write_r18+0x8>
 25a:	dc 01       	movw	r26, r24
 25c:	a0 50       	subi	r26, 0x00	; 0
 25e:	bc 4e       	sbci	r27, 0xEC	; 236
 260:	2c 93       	st	X, r18
 262:	3d e9       	ldi	r19, 0x9D	; 157
 264:	34 bf       	out	0x34, r19	; 52
 266:	23 e0       	ldi	r18, 0x03	; 3
 268:	20 83       	st	Z, r18
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
