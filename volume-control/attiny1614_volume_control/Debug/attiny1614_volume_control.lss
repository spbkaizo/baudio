
attiny1614_volume_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000035b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00803800  00803800  0000035a  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000035b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  000003d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002209  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c71  00000000  00000000  00002659  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005d0  00000000  00000000  000042ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  0000489c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000eee  00000000  00000000  0000495c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000265  00000000  00000000  0000584a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00005aaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_3>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a6 30       	cpi	r26, 0x06	; 6
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <spi_init>:
uint8_t EEMEM storedVolume = 127; // EEPROM variable to store volume level
uint8_t lastStoredVolume; // To track the last stored volume value for comparison
unsigned long writeDelayCounter = 0; // Counter to manage write delay

void spi_init() {
	PORTA.DIRSET = SCK_PIN_bm | SI_PIN_bm | LPOT_CS_bm | RPOT_CS_bm | LED_PIN_bm; // Set as output
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f4 e0       	ldi	r31, 0x04	; 4
  a8:	8e e9       	ldi	r24, 0x9E	; 158
  aa:	81 83       	std	Z+1, r24	; 0x01
	// Configure interrupt for volume buttons
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc; // Enable pull-up, interrupt on falling edge for VOL_UP
  ac:	8b e0       	ldi	r24, 0x0B	; 11
  ae:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc; // Enable pull-up, interrupt on falling edge for VOL_DOWN
  b0:	86 8b       	std	Z+22, r24	; 0x16
	sei(); // Enable global interrupts
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <spi_send_byte>:
}

void spi_send_byte(uint8_t byte) {
	for (int i = 7; i >= 0; i--) {
  b6:	27 e0       	ldi	r18, 0x07	; 7
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	23 c0       	rjmp	.+70     	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
		if (byte & (1 << i)) {
  bc:	48 2f       	mov	r20, r24
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <spi_send_byte+0x12>
  c4:	55 95       	asr	r21
  c6:	47 95       	ror	r20
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <spi_send_byte+0xe>
  cc:	40 ff       	sbrs	r20, 0
  ce:	06 c0       	rjmp	.+12     	; 0xdc <spi_send_byte+0x26>
			PORTA.OUT |= SI_PIN_bm;
  d0:	e0 e0       	ldi	r30, 0x00	; 0
  d2:	f4 e0       	ldi	r31, 0x04	; 4
  d4:	94 81       	ldd	r25, Z+4	; 0x04
  d6:	94 60       	ori	r25, 0x04	; 4
  d8:	94 83       	std	Z+4, r25	; 0x04
  da:	05 c0       	rjmp	.+10     	; 0xe6 <spi_send_byte+0x30>
			} else {
			PORTA.OUT &= ~SI_PIN_bm;
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f4 e0       	ldi	r31, 0x04	; 4
  e0:	94 81       	ldd	r25, Z+4	; 0x04
  e2:	9b 7f       	andi	r25, 0xFB	; 251
  e4:	94 83       	std	Z+4, r25	; 0x04
		}
		PORTA.OUT |= SCK_PIN_bm;
  e6:	e0 e0       	ldi	r30, 0x00	; 0
  e8:	f4 e0       	ldi	r31, 0x04	; 4
  ea:	94 81       	ldd	r25, Z+4	; 0x04
  ec:	92 60       	ori	r25, 0x02	; 2
  ee:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	9a e1       	ldi	r25, 0x1A	; 26
  f2:	9a 95       	dec	r25
  f4:	f1 f7       	brne	.-4      	; 0xf2 <spi_send_byte+0x3c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <spi_send_byte+0x42>
		_delay_us(10);
		PORTA.OUT &= ~SCK_PIN_bm;
  f8:	94 81       	ldd	r25, Z+4	; 0x04
  fa:	9d 7f       	andi	r25, 0xFD	; 253
  fc:	94 83       	std	Z+4, r25	; 0x04
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc; // Enable pull-up, interrupt on falling edge for VOL_DOWN
	sei(); // Enable global interrupts
}

void spi_send_byte(uint8_t byte) {
	for (int i = 7; i >= 0; i--) {
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	31 09       	sbc	r19, r1
 102:	33 23       	and	r19, r19
 104:	dc f6       	brge	.-74     	; 0xbc <spi_send_byte+0x6>
		}
		PORTA.OUT |= SCK_PIN_bm;
		_delay_us(10);
		PORTA.OUT &= ~SCK_PIN_bm;
	}
}
 106:	08 95       	ret

00000108 <pot_write>:

void pot_write(uint8_t cs_bm, uint8_t value) {
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	18 2f       	mov	r17, r24
 112:	06 2f       	mov	r16, r22
	PORTA.OUT &= ~cs_bm; // Select potentiometer
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d4 e0       	ldi	r29, 0x04	; 4
 118:	8c 81       	ldd	r24, Y+4	; 0x04
 11a:	91 2f       	mov	r25, r17
 11c:	90 95       	com	r25
 11e:	89 23       	and	r24, r25
 120:	8c 83       	std	Y+4, r24	; 0x04
	spi_send_byte(0x11); // Command to write
 122:	81 e1       	ldi	r24, 0x11	; 17
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_send_byte>
	spi_send_byte(value); // Value
 128:	80 2f       	mov	r24, r16
 12a:	0e 94 5b 00 	call	0xb6	; 0xb6 <spi_send_byte>
	PORTA.OUT |= cs_bm; // Deselect potentiometer
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	81 2b       	or	r24, r17
 132:	8c 83       	std	Y+4, r24	; 0x04
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <__vector_3>:

ISR(PORTA_PORT_vect) {
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	if (!(PORTA.IN & VOL_UP_bm) && volume < 255) {
 160:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 164:	85 fd       	sbrc	r24, 5
 166:	14 c0       	rjmp	.+40     	; 0x190 <__vector_3+0x52>
 168:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <volume>
 16c:	8f 3f       	cpi	r24, 0xFF	; 255
 16e:	81 f0       	breq	.+32     	; 0x190 <__vector_3+0x52>
		volume++;
 170:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <volume>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <volume>
		pot_write(LPOT_CS_bm, volume);
 17a:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <volume>
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	0e 94 84 00 	call	0x108	; 0x108 <pot_write>
		pot_write(RPOT_CS_bm, volume);
 184:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <volume>
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	0e 94 84 00 	call	0x108	; 0x108 <pot_write>
 18e:	17 c0       	rjmp	.+46     	; 0x1be <__vector_3+0x80>
		} else if (!(PORTA.IN & VOL_DOWN_bm) && volume > 0) {
 190:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 194:	86 fd       	sbrc	r24, 6
 196:	13 c0       	rjmp	.+38     	; 0x1be <__vector_3+0x80>
 198:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <volume>
 19c:	88 23       	and	r24, r24
 19e:	79 f0       	breq	.+30     	; 0x1be <__vector_3+0x80>
		volume--;
 1a0:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <volume>
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <volume>
		pot_write(LPOT_CS_bm, volume);
 1aa:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <volume>
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	0e 94 84 00 	call	0x108	; 0x108 <pot_write>
		pot_write(RPOT_CS_bm, volume);
 1b4:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <volume>
 1b8:	88 e0       	ldi	r24, 0x08	; 8
 1ba:	0e 94 84 00 	call	0x108	; 0x108 <pot_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	2f e7       	ldi	r18, 0x7F	; 127
 1c0:	88 e3       	ldi	r24, 0x38	; 56
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <__vector_3+0x86>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <__vector_3+0x90>
 1ce:	00 00       	nop
	}
	// Debounce (simple method)
	_delay_ms(50);
	// Clear interrupt flags for PORTA to prevent repeated triggers
	PORTA.INTFLAGS = VOL_UP_bm | VOL_DOWN_bm;
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <main>:

int main(void) {
	spi_init();
 1f8:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_init>

	// Load the volume level from EEPROM at startup
	volume = eeprom_read_byte(&storedVolume);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 45 01 	call	0x28a	; 0x28a <eeprom_read_byte>
 204:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <volume>
	lastStoredVolume = volume; // Initialize lastStoredVolume
 208:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <volume>
 20c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <lastStoredVolume>

	while (1) {
		// Toggle LED state
		PORTA.OUTTGL = LED_PIN_bm;
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__RODATA_PM_OFFSET__+0x7f8407>
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	89 e6       	ldi	r24, 0x69	; 105
 21a:	98 e1       	ldi	r25, 0x18	; 24
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x24>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x2e>
 226:	00 00       	nop
		_delay_ms(1000); // Approximate 1s delay

		// Increment write delay counter
		writeDelayCounter++;
 228:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 22c:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 230:	a0 91 02 38 	lds	r26, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 234:	b0 91 03 38 	lds	r27, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	a1 1d       	adc	r26, r1
 23c:	b1 1d       	adc	r27, r1
 23e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 242:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 246:	a0 93 02 38 	sts	0x3802, r26	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 24a:	b0 93 03 38 	sts	0x3803, r27	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>

		// Check if volume has changed and if sufficient delay has passed (approximating with counter)
		if ((volume != lastStoredVolume) && (writeDelayCounter >= 120)) { // 120 cycles * 1s delay = 2 minute
 24e:	30 91 04 38 	lds	r19, 0x3804	; 0x803804 <volume>
 252:	20 91 05 38 	lds	r18, 0x3805	; 0x803805 <lastStoredVolume>
 256:	32 17       	cp	r19, r18
 258:	d9 f2       	breq	.-74     	; 0x210 <main+0x18>
 25a:	88 37       	cpi	r24, 0x78	; 120
 25c:	91 05       	cpc	r25, r1
 25e:	a1 05       	cpc	r26, r1
 260:	b1 05       	cpc	r27, r1
 262:	b0 f2       	brcs	.-84     	; 0x210 <main+0x18>
			eeprom_write_byte(&storedVolume, volume);
 264:	60 91 04 38 	lds	r22, 0x3804	; 0x803804 <volume>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 4d 01 	call	0x29a	; 0x29a <eeprom_write_byte>
			lastStoredVolume = volume;
 270:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <volume>
 274:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <lastStoredVolume>
			writeDelayCounter = 0; // Reset counter after writing
 278:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
 27c:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 280:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 284:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
 288:	c3 cf       	rjmp	.-122    	; 0x210 <main+0x18>

0000028a <eeprom_read_byte>:
 28a:	03 d0       	rcall	.+6      	; 0x292 <eeprom_mapen>
 28c:	80 81       	ld	r24, Z
 28e:	99 27       	eor	r25, r25
 290:	08 95       	ret

00000292 <eeprom_mapen>:
 292:	fc 01       	movw	r30, r24
 294:	e0 50       	subi	r30, 0x00	; 0
 296:	fc 4e       	sbci	r31, 0xEC	; 236
 298:	08 95       	ret

0000029a <eeprom_write_byte>:
 29a:	26 2f       	mov	r18, r22

0000029c <eeprom_write_r18>:
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	e0 e0       	ldi	r30, 0x00	; 0
 2a2:	f0 e1       	ldi	r31, 0x10	; 16
 2a4:	32 81       	ldd	r19, Z+2	; 0x02
 2a6:	31 fd       	sbrc	r19, 1
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <eeprom_write_r18+0x8>
 2aa:	dc 01       	movw	r26, r24
 2ac:	a0 50       	subi	r26, 0x00	; 0
 2ae:	bc 4e       	sbci	r27, 0xEC	; 236
 2b0:	2c 93       	st	X, r18
 2b2:	3d e9       	ldi	r19, 0x9D	; 157
 2b4:	34 bf       	out	0x34, r19	; 52
 2b6:	23 e0       	ldi	r18, 0x03	; 3
 2b8:	20 83       	st	Z, r18
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
